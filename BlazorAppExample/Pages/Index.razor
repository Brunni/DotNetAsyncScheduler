@page "/"
@using AsyncScheduler
@using AsyncScheduler.History
@using System.Globalization
@using System.Threading
@using Microsoft.Extensions.Logging
@inject Scheduler Scheduler
@inject ILogger<Index> Logger
@implements IDisposable


<h1>Job Schedules</h1>

<div>@_lastQuickStartMessage</div>

<br/>
<button class="btn" @onclick="Refresh">Refresh</button>
<br/>

<h2>Running Jobs</h2>
<ul>
    @foreach (var jobKey in Scheduler.CurrentlyRunningJobs)
    {
        <li>Job: @jobKey</li>
    }
</ul>

<h2>Job List</h2>
<ul>
    @foreach (var job in Scheduler.JobManager.Jobs)
    {
        <li>Job: @job.Key - @GetLastResult(job.Key) <button class="btn btn-primary" @onclick="() => Schedule(job)">Schedule now</button></li>
    }
</ul>


@code {
    readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
    private Task _refreshTask;

    private string _lastQuickStartMessage;

    protected override void OnInitialized()
    {
        var cancellationToken = _cancellationTokenSource.Token;
        _refreshTask = Task.Run(async () =>
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                await Task.Delay(TimeSpan.FromSeconds(1), cancellationToken);
                await InvokeAsync(StateHasChanged);
            }
        }, cancellationToken);
    }

    string GetLastResult(string jobKey)
    {
        var jobHistoryEntry = GetLastExecution(jobKey);
        if (jobHistoryEntry == null)
        {
            return "not executed";
        }
        return jobHistoryEntry.ExecutionTime.ToString(CultureInfo.InvariantCulture) + ":" + jobHistoryEntry.JobResult;
    }

    public IJobHistoryEntry GetLastExecution(string jobKey)
    {
        return Scheduler.JobHistory.GetLastJobResult(jobKey);
    }

    private void Schedule(KeyValuePair<string, Type> job)
    {
        Logger.LogInformation("Quick start triggered {job}", job);
        Scheduler.QuickStart(job.Key)
            .ContinueWith(t =>
            {
                Logger.LogInformation("Quick start finished {result}", t.Result);
                return _lastQuickStartMessage = "Quick start of " + job.Key + ": " + t.Result;
            });
    }

    private void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Dispose();
    }

}